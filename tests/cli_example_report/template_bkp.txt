 <%
import sys
import os
import gzip
import io 
from io import StringIO, BytesIO
from contextlib import redirect_stdout
from py_cmdtabs import CmdTabs
import py_cmdtabs

def capture_stdout(func):
    def wrapper(*args, **kwargs):
        original_stdout = sys.stdout
        tmpfile = StringIO()
        sys.stdout = tmpfile
        returned = func(*args, **kwargs)
        printed = sys.stdout.getvalue()
        sys.stdout = original_stdout
        return returned, printed
    return wrapper

def strng2table(strng, fs="\t", rs="\n"):
	table = [row.split(fs) for row in strng.split(rs)][0:-1]
	return table

%>

<h1> Operation with tables </h1>
<%
	table = [
		[ 'as', '1'],
		[ 'as', '2'],
		[ 'zz', '3'],
		[ 'zz', '4']
	]
	plotter.hash_vars['tab] = table

	with open('cluster_genes_dis_desagg', 'w') as f:
		for r in table: f.write(f'{"\t".join(r)}\n')
	input_file = 'cluster_genes_dis_desagg'
	args = f"-i {input_file} -x 1 -s , -a 2"
%>

${ plotter.table(id='table', text=True, header=False, row_names=False, styled='bs')}
<p> ${f"aggregate_column_data {args}"} </p>
<%
	@capture_stdout
	def script2test(lsargs):
		return py_cmdtabs.aggregate_column_data(lsargs)
	_, printed = script2test(args.split(" "))
	test_result = strng2table(printed)
	plotter.hash_vars['test'] = test_result
%>

${ plotter.table(id='test', text=True, header=False, row_names=False, styled='bs')}

